format ELF64 executable 3
segment readable executable
entry start
FUNCTION_putchar:
    push rbp
    mov rbp, rsp
    mov rax, 1
    mov rdi, 1
    mov rsi, rbp
    add rsi, 16
    mov rdx, 1
    syscall
    pop rbp
    ret
start:
    call FUNCTION_main
    mov rdi, rax
    mov rax, 60
    syscall

FUNCTION_main:
    push rbp
    mov rbp, rsp
    ; Function code here
    mov rax, 1
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_put_num_char
    add rsp, 1
    mov rax, 2
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_put_num_char
    add rsp, 1
    mov rax, 3
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_put_num_char
    add rsp, 1
    mov rax, 4
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_put_num_char
    add rsp, 1
    mov rax, 5
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_put_num_char
    add rsp, 1
    mov rax, 6
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_put_num_char
    add rsp, 1
    mov rax, 7
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_put_num_char
    add rsp, 1
    mov rax, 8
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_put_num_char
    add rsp, 1
    mov rax, 9
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_put_num_char
    add rsp, 1
    mov rax, 10
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    call FUNCTION_print_hello_world
    add rsp, 0
    mov rax, 0
    pop rbp
    ret
    pop rbp
    ret


FUNCTION_put_num_char:
    push rbp
    mov rbp, rsp
    ; Function code here
    mov rax, [rbp + 16]
     push rax
    mov rax, '0'
    pop rbx
    add rax, rbx
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    pop rbp
    ret


FUNCTION_print_hello_world:
    push rbp
    mov rbp, rsp
    ; Function code here
    mov rax, 'H'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 'e'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 'l'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 'l'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 'o'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, ','
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, ' '
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 'W'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 'o'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 'r'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 'l'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 'd'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, '!'
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 10
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    pop rbp
    ret


