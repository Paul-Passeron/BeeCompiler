format ELF64 executable 3
segment readable executable
entry start
FUNCTION_putchar:
    push rbp
    mov rbp, rsp
    mov rax, 1
    mov rdi, 1
    mov rsi, rbp
    add rsi, 16
    mov rdx, 1
    syscall
    pop rbp
    ret
start:
    call FUNCTION_main
    mov rdi, rax
    mov rax, 60
    syscall

FUNCTION_main:
    push rbp
    mov rbp, rsp
    sub rsp, 64
    ; Function code here
    mov rax, 0
    lea rbx, [rbp - 8]
    mov [rbx], rax
label_0:
    mov rax, [rbp - 8]
    push rax
    mov rax, 10
    pop rbx
    cmp rax, rbx
    mov rax, 0
    mov rbx, 1
    cmovne rax, rbx
    cmp rax, 0
    je label_1
    mov rax, [rbp - 8]
    sub rsp, 8
    mov [rsp], rax
    call FUNCTION_fact
    add rsp, 8
    sub rsp, 8
    mov [rsp], rax
    call FUNCTION_printn
    add rsp, 8
    mov rax, 10
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, [rbp - 8]
    push rax
    mov rax, 1
    pop rbx
    add rax, rbx
    lea rbx, [rbp - 8]
    mov [rbx], rax
    jmp label_0
label_1:
    call FUNCTION_test_vars
    add rsp, 0
    mov rax, 10
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, 0
    add rsp, 64
    pop rbp
    ret
    add rsp, 64
    pop rbp
    ret


FUNCTION_fact:
    push rbp
    mov rbp, rsp
    sub rsp, 64
    ; Function code here
    mov rax, [rbp + 16]
    push rax
    mov rax, 2
    pop rbx
    cmp rbx, rax
    mov rax, 0
    mov rbx, 1
    cmovl rax, rbx
    cmp rax, 0
    je label_2
    mov rax, 1
    add rsp, 64
    pop rbp
    ret
    jmp label_3
label_2:
label_3:
    mov rax, [rbp + 16]
    push rax
    mov rax, [rbp + 16]
    push rax
    mov rax, 1
    pop rbx
    sub rbx, rax
    mov rax, rbx
    sub rsp, 8
    mov [rsp], rax
    call FUNCTION_fact
    add rsp, 8
    pop rbx
    mul rbx
    add rsp, 64
    pop rbp
    ret
    add rsp, 64
    pop rbp
    ret


FUNCTION_printn:
    push rbp
    mov rbp, rsp
    sub rsp, 64
    ; Function code here
    mov rax, [rbp + 16]
    push rax
    mov rax, 10
    pop rbx
    mov rcx, rax
    mov rax, rbx
    mov rbx, rcx
    cdq
    mov rdx, 0
    div rbx
    lea rbx, [rbp - 8]
    mov [rbx], rax
    mov rax, [rbp - 8]
    cmp rax, 0
    je label_4
    mov rax, [rbp - 8]
    sub rsp, 8
    mov [rsp], rax
    call FUNCTION_printn
    add rsp, 8
    jmp label_5
label_4:
label_5:
    mov rax, [rbp + 16]
    push rax
    mov rax, 10
    pop rbx
    mov rdx, 0
    mov rcx, rax
    mov rax, rbx
    mov rbx, rcx
    cdq
    div rbx
    mov rax, rdx
    push rax
    mov rax, '0'
    pop rbx
    add rax, rbx
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    add rsp, 64
    pop rbp
    ret


FUNCTION_test_vars:
    push rbp
    mov rbp, rsp
    sub rsp, 64
    ; Function code here
    mov rax, 'a'
    lea rbx, [rbp - 1]
    mov [rbx], byte al
    mov rax, [rbp - 1]
    push rax
    mov rax, 1
    pop rbx
    add rax, rbx
    lea rbx, [rbp - 2]
    mov [rbx], byte al
    mov rax, [rbp - 2]
    push rax
    mov rax, 1
    pop rbx
    add rax, rbx
    lea rbx, [rbp - 3]
    mov [rbx], byte al
    mov rax, [rbp - 3]
    push rax
    mov rax, 1
    pop rbx
    add rax, rbx
    lea rbx, [rbp - 4]
    mov [rbx], byte al
    mov rax, [rbp - 1]
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, [rbp - 2]
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, [rbp - 3]
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    mov rax, [rbp - 4]
    sub rsp, 1
    mov [rsp], byte al
    call FUNCTION_putchar
    add rsp, 1
    add rsp, 64
    pop rbp
    ret


